{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","SearchBOx","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,YAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACA,qBACCC,IAAI,WACJC,IAAG,+BAA4BH,EAAMI,SAASC,GAA3C,4BAEJ,mCAAML,EAAMI,SAASE,KAArB,OACA,mCAAMN,EAAMI,SAASG,MAArB,aCNSC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACCD,EAAMI,SAASK,KAAI,SAAAL,GAAQ,OACxB,cAAC,EAAD,CAA0BA,SAAUA,GAAvBA,EAASC,WCHjBK,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBAAOX,UAAU,SACjBY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCCG,E,kDApCb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAXpC,EAAKC,MAAQ,CACXjB,SAAU,GACVc,YAAY,IAJH,E,gEAOO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEb,SAAUsB,S,+BAKjC,IAAD,EAC2BC,KAAKN,MAA/BjB,EADD,EACCA,SAAUc,EADX,EACWA,YACZU,EAAmBxB,EAASyB,QAAO,SAAAzB,GAAQ,OAC/CA,EAASE,KAAKwB,cACdC,SAASb,EAAYY,kBAEvB,OACE,sBAAK7B,UAAU,MAAf,UACC,kDACG,cAAC,EAAD,CACAU,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUR,SAAUwB,W,GA7BVI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0d6768d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n    <img \r\n     alt='monsters'\r\n     src = {`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}/>\r\n    \r\n    <h2> {props.monsters.name} </h2>\r\n    <p>  {props.monsters.email}  </p>\r\n   \r\n    </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.style.css';\r\nexport const CardList = props => ( \r\n    <div className='card-list'>\r\n    {props.monsters.map(monsters=> (\r\n        <Card key = {monsters.id} monsters={monsters} /> \r\n      ))}\r\n</div>\r\n);\r\n\r\n  ","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBOx = ({placeholder,handleChange}) => (\r\n    <input className='search'\r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange}\r\n      />\r\n ); ","import React, { Component } from 'react';\nimport './App.css';\nimport {CardList} from  './components/card-list/card-list.components';\nimport {SearchBOx} from './components/search-box/search-box.component';\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users => this.setState({ monsters: users }));\n  }\n  handleChange = e => {\n    this.setState({searchField:e.target.value});\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monsters =>\n      monsters.name.toLowerCase().\n      includes(searchField.toLowerCase())\n      );\n    return (\n      <div className=\"App\">\n       <h1>Monsters Rolodex</h1>   \n          <SearchBOx\n          placeholder='Search Monsters'\n          handleChange={this.handleChange}\n          />\n        <CardList monsters={filteredMonsters}/>\n       \n      \n      </div>\n    );\n  }\n}\n   \nexport default App;\n\n\n\n/*class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      string: 'Hello Salman'\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n         {this.state.string}\n        </p>\n        <button onClick={()=>this.setState({string:'How old are you buddy'})}>Change Text</button>\n      </header>\n    </div>\n    );\n  }\n}\n   \nexport default App;*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}